#https://taskfile.dev/
version: '3'

env:
  TMP: tmp

tasks:

  tidy:
    desc: 'run Go mod tidy'
    cmds:
      - go mod tidy

  format:
    desc: 'formats the code'
    deps:
      - task: check-yq-installed
    cmds:
      - task: format-internal

  format-internal:
    desc: 'formats the code'
    internal: true
    deps:
      - task: check-go-tool
        vars:
          PACKAGE: 'gofumpt'
      - task: check-go-tool
        vars:
          PACKAGE: betteralign
    vars:
      VERSION:
        sh: /{{.TMP}}/yq/{{.YQ_VERSION}}/yq eval '.gofumpt.version' tools-go.yml
      BA_VERSION:
        sh: /{{.TMP}}/yq/{{.YQ_VERSION}}/yq eval '.betteralign.version' tools-go.yml
    cmds:
      - go run golang.org/x/tools/gopls/internal/analysis/modernize/cmd/modernize@latest -fix -test ./...
      - /{{.TMP}}/betteralign/{{.BA_VERSION}}/betteralign -apply ./... || true
      - /{{.TMP}}/gofumpt/{{.VERSION}}/gofumpt -extra -l -w .

  lint:
    desc: 'run Go linters'
    deps:
      - task: check-yq-installed
    cmds:
      - task: lint-internal

  lint-internal:
    internal: true
    desc: 'run Go linters'
    deps:
      - task: check-go-tool
        vars:
          PACKAGE: staticcheck
      - task: check-go-tool
        vars:
          PACKAGE: betteralign
      - task: check-go-tool
        vars:
          PACKAGE: revive
    vars:
      BA_VERSION:
        sh: /{{.TMP}}/yq/{{.YQ_VERSION}}/yq eval '.betteralign.version' tools-go.yml
      SC_VERSION:
        sh: /{{.TMP}}/yq/{{.YQ_VERSION}}/yq eval '.staticcheck.version' tools-go.yml
      RV_VERSION:
        sh: /{{.TMP}}/yq/{{.YQ_VERSION}}/yq eval '.revive.version' tools-go.yml
    cmds:
      - go vet ./...
      - /{{.TMP}}/revive/{{.RV_VERSION}}/revive -config revive.toml -formatter friendly -set_exit_status ./...
      - /{{.TMP}}/staticcheck/{{.SC_VERSION}}/staticcheck ./...
      - /{{.TMP}}/betteralign/{{.BA_VERSION}}/betteralign ./...

  licenses:
    desc: 'check licenses'
    deps:
      - task: check-yq-installed
    cmds:
      - task: licenses-internal

  licenses-internal:
    desc: 'check licenses'
    internal: true
    deps:
      - task: check-go-tool
        vars:
          PACKAGE: 'go-licenses'
    vars:
      VERSION:
        sh: /{{.TMP}}/yq/{{.YQ_VERSION}}/yq eval '.go-licenses.version' tools-go.yml
    cmds:
      - |
          PROJECT="$(go list -m)"
          ALLOWED_LICENSES="$(<.allowed_license_types)"
          go-licenses report --ignore "$PROJECT" --ignore "github.com/golang/freetype/raster" --ignore "github.com/golang/freetype/truetype" --ignore "oss.terrastruct.com/d2" .
          go-licenses check --allowed_licenses="$ALLOWED_LICENSES" --ignore "$PROJECT"  --ignore "github.com/oktalz/present" --ignore "github.com/golang/freetype/raster" --ignore "github.com/golang/freetype/truetype" --ignore "oss.terrastruct.com/d2" .

  govulncheck:
    desc: 'check vulnerabilities in Go code'
    deps:
      - task: check-yq-installed
    cmds:
      - task: govulncheck-internal

  govulncheck-internal:
    internal: true
    deps:
      - task: check-go-tool
        vars:
          PACKAGE: 'govulncheck'
    vars:
      VERSION:
        sh: /{{.TMP}}/yq/{{.YQ_VERSION}}/yq eval '.govulncheck.version' tools-go.yml
    cmds:
      - /{{.TMP}}/govulncheck/{{.VERSION}}/govulncheck -show verbose ./...
